import Test
require lexer
require token
require ../Parser/parse_error

:test_potential_keyword
    expect(potential_keyword?("i")).is(true)
    expect(potential_keyword?("if")).is(true)
    expect(potential_keyword?("if ")).is(false)
    expect(potential_keyword?("constr")).is(true)
end

:test_is_keyword
    expect(is_keyword?("if")).is(true)
    expect(is_keyword?("end")).is(true)
    expect(is_keyword?("while")).is(true)
    expect(is_keyword?("for")).is(true)
    expect(is_keyword?("i")).is(false)
end

:test_is_ident_start
    expect(is_ident_start?("&")).is(false)
    expect(is_ident_start?("a")).is(true)
    expect(is_ident_start?("3")).is(false)
end

constructor StubSource(str)
    source = str
end

:test_lex_basic
    expect(lex(StubSource("<"))).is([Token("BINARY_OP", "<")])
    expect(lex(StubSource("<="))).is([Token("BINARY_OP", "<=")])
    expect(lex(StubSource(">"))).is([Token("BINARY_OP", ">")])
    expect(lex(StubSource(">="))).is([Token("BINARY_OP", ">=")])
    expect(lex(StubSource("\n"))).is([Token("NEWLINE", "")])
    expect(lex(StubSource("||&&"))).is([Token("BINARY_OP", "||"), Token("BINARY_OP", "&&")])
    expect(lex(StubSource(";\n"))).is([Token("BINARY_OP", ";"),Token("NEWLINE", "")])
    expect(lex(StubSource("|"))).is([Token("BINARY_OP", "|")])
    expect(lex(StubSource("&"))).is([Token("BINARY_OP", "&")])
    expect(lex(StubSource("-"))).is([Token("BINARY_OP", "-")])
    expect(lex(StubSource("->"))).is([Token("BINARY_OP", "->")])
    expect(lex(StubSource("--"))).is([Token("UNARY_OP", "--")])
    expect(lex(StubSource("."))).is([Token("BINARY_OP", ".")])
    expect(lex(StubSource(","))).is([Token("BINARY_OP", ",")])
    expect(lex(StubSource("^"))).is([Token("BINARY_OP", "^")])
end

:test_valid_strings
    strings = ["","abc","a$!@%@%", "123156"]
    strings.each(s -> expect(lex(StubSource("\"" + s + "\""))).is([Token("LITERAL", s)]))
end

:test_unclosed_string
    string = "\"asdf"
    closure = dummy -> lex(StubSource(string))
    expect(closure).to_raise(ParseError("UNCLOSED_STRING", string, 1))
end

:test_unclosed_string_with_newline
    string = "\"asdf\n\""
    closure = dummy -> lex(StubSource(string))
    expect(closure).to_raise(ParseError("UNCLOSED_STRING", "\"asdf", 1))
end

:test_token_lexing
    expect(lex(StubSource("a b"))).is([Token("ID", "a"), Token("ID", "b")])
    expect(lex(StubSource("a\nb"))).is([Token("ID", "a"), Token("NEWLINE", ""), Token("ID", "b")])
end

:test_adding_two_symbols
    expect(lex(StubSource("long_symbol + another_one"))).is([Token("ID", "long_symbol"), Token("BINARY_OP", "+"), Token("ID", "another_one")])
end

:test_single_pipe_should_throw_error
    closure = dummy -> lex(StubSource("~"))
    expect(closure).to_raise(ParseError("LONE_TILDE", "~", 1))
end

:test_error_message_should_include_line_properly
    closure = dummy -> lex(StubSource("\n\n\nasdf~\n\n"))
    expect(closure).to_raise(ParseError("LONE_TILDE", "asdf~", 4))
end