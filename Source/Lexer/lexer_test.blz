import Test
require lexer
require token
require ../Parser/parse_error

:test_potential_keyword
    expect(potential_keyword?("i")).is(true)
    expect(potential_keyword?("if")).is(true)
    expect(potential_keyword?("if ")).is(false)
    expect(potential_keyword?("constr")).is(true)
end

:test_is_keyword
    expect(is_keyword?("if")).is(true)
    expect(is_keyword?("end")).is(true)
    expect(is_keyword?("while")).is(true)
    expect(is_keyword?("for")).is(true)
    expect(is_keyword?("i")).is(false)
end

:test_is_ident_start
    expect(is_ident_start?("&")).is(false)
    expect(is_ident_start?("a")).is(true)
    expect(is_ident_start?("3")).is(false)
end

constructor StubSource(str)
    source = str
end

:test_lex_basic
    expect(lex(StubSource("<"))).is([Token("BINARY_OP", "<")])
    expect(lex(StubSource("<="))).is([Token("BINARY_OP", "<=")])
    expect(lex(StubSource(">"))).is([Token("BINARY_OP", ">")])
    expect(lex(StubSource(">="))).is([Token("BINARY_OP", ">=")])
    expect(lex(StubSource("\n"))).is([Token("NEWLINE", "")])
    expect(lex(StubSource("||&&"))).is([Token("BINARY_OP", "||"), Token("BINARY_OP", "&&")])
    expect(lex(StubSource(";\n"))).is([Token("BINARY_OP", ";"),Token("NEWLINE", "")])
    expect(lex(StubSource("|"))).is([Token("BINARY_OP", "|")])
    expect(lex(StubSource("&"))).is([Token("BINARY_OP", "&")])
    expect(lex(StubSource("-"))).is([Token("BINARY_OP", "-")])
    expect(lex(StubSource("->"))).is([Token("BINARY_OP", "->")])
    expect(lex(StubSource("--"))).is([Token("UNARY_OP", "--")])
    expect(lex(StubSource("."))).is([Token("BINARY_OP", ".")])
    expect(lex(StubSource(","))).is([Token("BINARY_OP", ",")])
end

:test_single_pipe_should_throw_error
    closure = dummy -> lex(StubSource("~"))
    expect(closure).to_raise(ParseError("LONE_TILDE", "~", 1))
end

:test_error_message_should_include_line_properly
    closure = dummy -> lex(StubSource("\n\n\nasdf~\n\n"))
    expect(closure).to_raise(ParseError("LONE_TILDE", "asdf~", 4))
end