require token
require ../Parser/parse_error


keywords = ["if", "while", "for", "constructor", "import", "require", "end"]

:potential_keyword?(str)
    keywords.map(x -> x.starts_with?(str)).any!?()
end

:is_keyword?(str)
    keywords.contains?(str)
end

:whitespace?(char)
    char == " " || char == "\r" || char == "\n" || char == "\t"
end

:tok?(str)
    str != ""
end

reserved_tokens = ["(", ")", "[", "]", "{", "}", "<", ">", ";", "|", "&", "=", "~", "*", "/", "%", "_", "!", "+", "-", ".", ",", "\""]
:is_ident_start?(str)
    return reserved_tokens.contains?(str) == false && str.is_number?() == false && whitespace?(str) == false
end
:is_ident_nonstart?(str)
    return (reserved_tokens.contains?(str) == false || str == "!" || str == "_") && whitespace?(str) == false
end

:translate_escape(char)
    if char == "\\"
        "\\"
    else if char == "n"
        "\n"
    else if char == "t"
        "\t"
    else if char == "r"
        "\r"
    else if char == "b"
        "\b"
    end
end

# Lexes the given source
# SourceFile, Config -> [Token]
:lex(source_file, config)
    source = source_file.source
    building = ""
    in_bounds? = ((n) -> n < source.size())
    tokens = []
    line_number = 1
    for i = 0; i < source.size(); i++
        current_char = source[i]
        if current_char == "("
            tokens.add!(Token("BRACKET", "PAREN_OPEN"))
        else if current_char == ")"
            tokens.add!(Token("BRACKET", "PAREN_CLOSE"))
        else if current_char == "["
            tokens.add!(Token("BRACKET", "SQ_BRACKET_OPEN"))
        else if current_char == "]"
            tokens.add!(Token("BRACKET", "SQ_BRACKET_CLOSE"))
        else if current_char == "*"
            tokens.add!(Token("BINARY_OP", "*"))
        else if current_char == "/"
            tokens.add!(Token("BINARY_OP", "/"))
        else if current_char == "%"
            tokens.add!(Token("BINARY_OP", "%"))
        else if current_char == "."
            tokens.add!(Token("BINARY_OP", "."))
        else if current_char == ","
            tokens.add!(Token("BINARY_OP", ","))
        else if current_char == "{"
            print("Environment variable not yet implemented")
        else if current_char == "<"
            if in_bounds?(i + 1) && source[i + 1] == "="
                i++
                tokens.add!(Token("BINARY_OP", "<="))
            else
                tokens.add!(Token("BINARY_OP", "<"))
            end
        else if current_char == ">"
            if in_bounds?(i + 1) && source[i + 1] == "="
                i++
                tokens.add!(Token("BINARY_OP", ">="))
            else
                tokens.add!(Token("BINARY_OP", ">"))
            end
        else if current_char == ";"
            tokens.add!(Token("BINARY_OP", ";"))
        else if current_char == "|"
            if in_bounds?(i + 1) && source[i + 1] == "|"
                i++
                tokens.add!(Token("BINARY_OP", "||"))
            else
                tokens.add!(Token("BINARY_OP", "|"))
            end
        else if current_char == "&"
            if in_bounds?(i + 1) && source[i + 1] == "&"
                i++
                tokens.add!(Token("BINARY_OP", "&&"))
            else
                tokens.add!(Token("BINARY_OP", "&"))
            end
        else if current_char == "~"
            # Must be ~=
            if in_bounds?(i + 1) && source[i + 1] == "="
                i++
                tokens.add!(Token("BINARY_OP", "~="))
            else
                throw ParseError("LONE_TILDE", get_line(source, line_number), line_number)
            end
        else if current_char == "_"
            # Only one operator is valid __
            if in_bounds?(i + 1) && source[i + 1] == "_"
                i++
                tokens.add!(Token("BINARY_OP", "__"))
            else
                throw ParseError("LONE_UNDERSCORE", get_line(source, line_number), line_number)
            end
        else if current_char == "!"
            #TODO
        else if current_char == "+"
            if in_bounds?(i + 1) && source[i + 1] == "+"
                i++
                tokens.add!(Token("UNARY_OP", "++"))
            else
                tokens.add!(Token("BINARY_OP", "+"))
            end
        else if current_char == "-"
            # Check for --
            if in_bounds?(i + 1) && source[i + 1] == "-"
                i++
                tokens.add!(Token("UNARY_OP", "--"))

            # Maybe it is a lambda? (->)
            else if in_bounds?(i + 1) && source[i + 1] == ">"
                i++
                tokens.add!(Token("BINARY_OP", "->"))
            
            # It is a -
            else
                tokens.add!(Token("BINARY_OP", "-"))
            end
        else if current_char == "."
            tokens.add!(Token("BINARY_OP", "."))
        else if current_char == ","
            tokens.add!(Token("BINARY_OP", ","))
        else if current_char == "^"
            tokens.add!(Token("BINARY_OP", "^"))
        else if current_char == "\""
            done = false
            found_end = false
            building = ""
            while done == false && in_bounds?(i + 1)
                i++
                looking_at = source[i]
                if looking_at == "\""
                    done = true
                    found_end = true
                else if looking_at == "\\"
                    i++
                    if in_bounds?(i)
                        building = building + translate_escape(source[i])
                    end
                else if looking_at == "\n"
                    done = true
                    # The string should not continue over a new line
                else
                    building = building + looking_at
                end
            end
            if found_end == false
                throw ParseError("UNCLOSED_STRING", get_line(source, line_number), line_number)
            end
            tokens.add!(Token("LITERAL", building))
            building = ""
        else if current_char == "\n"
            tokens.add!(Token("NEWLINE", ""))
            line_number++
        else if is_ident_start?(current_char)
           building = current_char
           while in_bounds?(i + 1) && is_ident_nonstart?(source[i + 1])
                i++
                building = building + source[i]
           end
           tokens.add!(Token("ID", building))
           building = ""
        end
    end
    if tok?(building)
        tokens.add!(Token("ID", building))
    end
    return tokens
end

:get_line(source, line_number)
    return source.split_on_token("\n")[line_number - 1]
end


#        building = building + source[i]
#        if potential_keyword?!(building)
#            if is_keyword?!(building)
#                tokens.add!(Token("KEYWORD", building))
#                building = ""
#            end
#        else
#            if whitespace?(source[i])
#                building.trim!()
#                if tok?(building)
#                    building = ""
#                    tokens.add!(Token("ID", building))
#                end
#            end
#        end